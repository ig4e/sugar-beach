// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(uuid()) @map("_id")
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(uuid()) @map("_id")
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                     String                       @id @default(uuid()) @map("_id")
    image                  String?
    media                  Media?
    name                   String                       @default("SweetUser")
    email                  String                       @unique
    emailVerified          DateTime?
    accounts               Account[]
    sessions               Session[]
    feedbacks              UserFeedback[]
    orders                 Order[]
    shippingAddress        UserShippingAddress[]
    role                   UserRole                     @default(USER)
    recentlyViewedProducts UserRecentlyViewedProducts[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model UserRecentlyViewedProducts {
    id        String   @id @default(uuid()) @map("_id")
    user      User     @relation(fields: [userId], references: [id])
    product   Product  @relation(fields: [productId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String
    productId String
}

model Category {
    id       String    @id @default(uuid()) @map("_id")
    name     Name
    products Product[] @relation(references: [id], fields: [productIDs])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    productIDs String[]
}

model Product {
    id               String                       @id @default(uuid()) @map("_id")
    media            Media[]
    name             Name
    description      Description
    price            Float
    compareAtPrice   Float?
    quantity         Int
    status           ProductStatus
    feedback         UserFeedback[]
    categories       Category[]                   @relation(references: [id], fields: [categoryIDs])
    type             String
    visits           Int                          @default(0)
    recentUserViewes UserRecentlyViewedProducts[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    orders      ProductOnOrder[]
    categoryIDs String[]
    featured    Featured[]
}

model Featured {
    id      String         @id @default(uuid()) @map("_id")
    media   Media[]
    product Product        @relation(fields: [productId], references: [id])
    status  FeaturedStatus @default(ACTIVE)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    productId String
}

model Order {
    id              String              @id @default(uuid()) @map("_id")
    number          Int                 @unique @default(1)
    status          OrderStatus         @default(ORDER_PLACED)
    user            User                @relation(fields: [userId], references: [id])
    shippingAddress UserShippingAddress @relation(fields: [userShippingAddressId], references: [id])
    products        ProductOnOrder[]
    additionalNotes String?
    totalPrice      Float
    invoice         OrderInvoice?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId                String
    userShippingAddressId String
}

model OrderInvoice {
    id              String               @id @default(uuid()) @map("_id")
    provider        OrderInvoiceProvider
    invoiceId       String               @unique
    url             String
    status          InvoiceStatus        @default(PENDING)
    totalGrossPrice Float
    totalNetPrice   Float?

    order     Order    @relation(fields: [orderId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    orderId   String   @unique
}

enum OrderInvoiceProvider {
    MYFATOORAH
    TABBY
    TAMARA
}

model ProductOnOrder {
    id             String               @id @default(uuid()) @map("_id")
    order          Order                @relation(fields: [orderId], references: [id], onDelete: Cascade)
    product        Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
    price          Float
    compareAtPrice Float?
    quantity       Int
    status         ProductOnOrderStatus @default(UN_FULFILLED)

    productId String
    orderId   String
}

model UserFeedback {
    id      String  @id @default(uuid()) @map("_id")
    content String
    score   Float
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId    String
    productId String
}

model UserShippingAddress {
    id              String              @id @default(uuid()) @map("_id")
    country         Countries
    fullName        String
    phoneNumber     PhoneNumber
    streetName      String
    buildingNumber  String
    city            String
    province        String
    nearestLandmark String?
    type            ShippingAddressType @default(HOME)
    orders          Order[]

    user User @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String
}

model Discount {
    id          String       @id @default(uuid()) @map("_id")
    code        String       @unique
    type        DiscountType @default(AMOUNT_OFF_ORDER)
    precentage  Float?
    fixedAmount Float?
    uses        Int          @default(0)
    expiresAt   DateTime

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    id         String   @id @default(uuid()) @map("_id")
    identifier String
    token      String   @unique
    expires    DateTime

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([identifier, token])
}

model VerificationCode {
    id         String   @id @default(uuid()) @map("_id")
    identifier String
    code       String
    expires    DateTime

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CurrencyRates {
    id  String @id @default(uuid()) @map("_id")
    BHD Float
    KWD Float
    IQD Float
    OMR Float
    QAR Float
    SAR Float
    AED Float

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}

enum DiscountType {
    AMOUNT_OFF_ORDER
}

type Media {
    url       String
    key       String
    name      String
    size      Int
    isVideo   Boolean  @default(false)
    createdAt DateTime @default(now())
}

type Name {
    ar String
    en String
}

type Description {
    ar String?
    en String?
}

type PhoneNumber {
    code   String
    number String
}

enum OrderStatus {
    ORDER_PLACED
    PROCESSING
    CANCELLED
    PREPARING_TO_SHIP
    SHIPPED
    DELIVERED
}

enum InvoiceStatus {
    PENDING
    CANCELLED
    PAID
    REFUND_PENDING
    REFUNDED
}

enum ShippingAddressType {
    HOME
    OFFICE
}

enum Countries {
    BH
    KW
    OM
    QA
    SA
    AE
}

enum UserRole {
    ADMIN
    STAFF
    USER
}

enum ProductStatus {
    ACTIVE
    DRAFT
    ARCHIVED
}

enum FeaturedStatus {
    ACTIVE
    DRAFT
    ARCHIVED
}

enum ProductOnOrderStatus {
    FULFILLED
    UN_FULFILLED
}
